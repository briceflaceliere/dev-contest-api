<?php

namespace DevContest\{{Bundle}}\Controller;

use FOS\RestBundle\Controller\FOSRestController;
use FOS\RestBundle\Controller\Annotations as Rest;
use FOS\RestBundle\Request\ParamFetcherInterface;
use FOS\RestBundle\Util\Codes;
use Symfony\Component\HttpFoundation\Request;
use Nelmio\ApiDocBundle\Annotation\ApiDoc;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;

/**
 * Class {{Entity}}Controller
 * @package DevContest\{{Bundle}}\Controller
 */
class {{Entity}}Controller extends AbstractController
{
    /**
     * Get {{Entities}}
     *
     * @param Request               $request
     * @param ParamFetcherInterface $paramFetcher
     * @return \Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination
     *
     * @ApiDoc(
     *   resource = "{{Entities}}",
     *   statusCodes = {
     *     200 = "Success",
     *     403 = "Insufficient access rights"
     *   },
     *   output  = "Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination"
     * )
     *
     * @Rest\QueryParam(name="page", requirements="\d+", default="1", description="Page of the result")
     * @Rest\QueryParam(name="limit", requirements="([0-9]{1,2}|100)", default="25", description="Limit of the result")
     *
     * @Rest\View(serializerGroups={"all", "list"})
     */
    public function get{{Entities}}Action(Request $request, ParamFetcherInterface $paramFetcher)
    {
        return parent::getObjects('{{Bundle}}:{{Entity}}', $request, $paramFetcher);
    }

    /**
     * Get {{Entity}}
     *
     * @param integer $id Id of the {{Entity}}
     * @param Request $request
     * @return \DevContest\{{Bundle}}\Entity\{{Entity}}
     *
     * @ApiDoc(
     *   resource = "{{Entities}}",
     *   statusCodes = {
     *     200 = "Success",
     *     403 = "Insufficient access rights",
     *     404 = "{{Entity}} not found"
     *   },
     *   output  = "DevContest\{{Bundle}}\Entity\{{Entity}}"
     * )
     *
     * @Rest\View(serializerGroups={"all", "detail"})
     * @Rest\Route(requirements={"id"="[0-9]+"})
     */
    public function get{{Entity}}Action($id, Request $request)
    {
        return parent::getObject('{{Bundle}}:{{Entity}}', $request);
    }

    /**
     * Create {{Entity}}
     *
     * @param Request $request
     * @return array
     *
     * @ApiDoc(
     *   resource = "{{Entities}}",
     *   statusCodes = {
     *     201 = "Success",
     *     403 = "Insufficient access rights"
     *   },
     *   input   = "DevContest\{{Bundle}}\Form\Type\{{Entity}}Type"
     * )
     *
     * @Rest\View()
     * @Security("has_role('ROLE_ADMIN')")
     */
    public function post{{Entities}}Action(Request $request)
    {
        return parent::postObjects('{{Bundle}}:{{Entity}}', $request);
    }

    /**
     * Update {{Entity}}
     *
     * @param Request $request
     * @param integer $id      Id of the {{Entity}}
     * @return array
     *
     * @ApiDoc(
     *   resource = "{{Entities}}",
     *   statusCodes = {
     *     204 = "Success",
     *     403 = "Insufficient access rights"
     *   },
     *   input   = "DevContest\{{Bundle}}\Form\Type\{{Entity}}Type"
     * )
     *
     * @Rest\Route(requirements={"id"="[0-9]+"})
     * @Rest\View()
     * @Security("has_role('ROLE_ADMIN')")
     */
    public function put{{Entities}}Action($id, Request $request)
    {
        return parent::putObjects('{{Bundle}}:{{Entity}}', $request);
    }

    /**
     * Delete {{Entity}}
     *
     * @param Request $request
     * @param integer $id      Id of the {{Entity}}
     * @return array
     *
     * @ApiDoc(
     *   resource = "{{Entities}}",
     *   statusCodes = {
     *     204 = "Success",
     *     403 = "Insufficient access rights"
     *   }
     * )
     *
     * @Rest\Route(requirements={"id"="[0-9]+"})
     * @Rest\View()
     * @Security("has_role('ROLE_ADMIN')")
     */
    public function delete{{Entities}}Action($id, Request $request)
    {
        return parent::deleteObjects('{{Bundle}}:{{Entity}}', $request);
    }
}
